#!/usr/bin/env python3
"""
Модуль тестирования ExploitGenerator - автоматизированная проверка генератора эксплойтов
для NeuroRAT. Предназначен для валидации функциональности и обнаружения регрессий.
"""

import os
import sys
import unittest
import json
import tempfile
import shutil
from typing import Dict, Any

# Импортируем модуль генератора эксплойтов
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from exploits_generator import ExploitGenerator

class TestExploitGenerator(unittest.TestCase):
    """Тесты для модуля ExploitGenerator"""
    
    def setUp(self):
        """Подготовка тестового окружения"""
        # Создаем временные директории для кеша и выходных файлов
        self.temp_dir = tempfile.mkdtemp()
        self.cache_dir = os.path.join(self.temp_dir, "cache")
        self.output_dir = os.path.join(self.temp_dir, "output")
        
        # Создаем тестовую базу данных CVE
        self.test_cve_db = {
            "CVE-2021-44228": {  # Log4Shell
                "name": "Log4Shell",
                "type": "rce",
                "severity": "critical",
                "affected_platforms": ["java"],
                "description": "Remote Code Execution vulnerability in Log4j 2",
                "references": [
                    "https://nvd.nist.gov/vuln/detail/CVE-2021-44228"
                ]
            },
            "CVE-2023-23397": {  # Microsoft Outlook
                "name": "Microsoft Outlook NTLM Leak",
                "type": "privilege_escalation",
                "severity": "critical",
                "affected_platforms": ["windows"],
                "description": "Microsoft Outlook vulnerability with NTLM authentication",
                "references": [
                    "https://nvd.nist.gov/vuln/detail/CVE-2023-23397"
                ]
            }
        }
        
        # Записываем тестовую базу во временный файл
        self.test_db_path = os.path.join(self.temp_dir, "test_cve_db.json")
        with open(self.test_db_path, 'w') as f:
            json.dump(self.test_cve_db, f)
        
        # Создаем экземпляр генератора
        self.generator = ExploitGenerator(
            cache_dir=self.cache_dir,
            output_dir=self.output_dir,
            cve_db_path=self.test_db_path
        )
    
    def tearDown(self):
        """Очистка после тестов"""
        # Удаляем временные директории
        shutil.rmtree(self.temp_dir)
    
    def test_cve_database_loading(self):
        """Тест загрузки базы данных CVE"""
        # Проверяем, что база данных загружена корректно
        self.assertIn("CVE-2021-44228", self.generator.cve_database)
        self.assertIn("CVE-2023-23397", self.generator.cve_database)
        
        # Проверяем содержимое записей
        log4shell = self.generator.cve_database["CVE-2021-44228"]
        self.assertEqual(log4shell["name"], "Log4Shell")
        self.assertEqual(log4shell["type"], "rce")
        self.assertEqual(log4shell["severity"], "critical")
    
    def test_fetch_cve_info(self):
        """Тест получения информации о CVE"""
        # Проверяем получение существующего CVE
        cve_info = self.generator.fetch_cve_info("CVE-2021-44228")
        self.assertEqual(cve_info["name"], "Log4Shell")
        
        # Проверяем получение несуществующего CVE
        unknown_cve = self.generator.fetch_cve_info("CVE-FAKE-0000")
        self.assertIn("type", unknown_cve)
        self.assertEqual(unknown_cve["type"], "unknown")
    
    def test_select_exploit_generator(self):
        """Тест выбора генератора эксплойта"""
        # Проверяем для RCE
        rce_info = {"type": "rce"}
        generator = self.generator.select_exploit_generator(rce_info)
        self.assertEqual(generator, "generate_rce_exploit")
        
        # Проверяем для privilege escalation
        privesc_info = {"type": "privilege_escalation"}
        generator = self.generator.select_exploit_generator(privesc_info)
        self.assertEqual(generator, "generate_privesc_exploit")
        
        # Проверяем для неизвестного типа
        unknown_info = {"type": "unknown_type"}
        generator = self.generator.select_exploit_generator(unknown_info)
        self.assertEqual(generator, "generate_generic_exploit")
    
    def test_generate_exploit(self):
        """Тест генерации эксплойта"""
        # Генерируем эксплойт Log4Shell
        exploit_path = self.generator.generate_exploit("CVE-2021-44228", "java")
        
        # Проверяем, что файл создан
        self.assertTrue(os.path.exists(exploit_path))
        
        # Проверяем содержимое
        with open(exploit_path, 'r') as f:
            content = f.read()
            self.assertIn("Log4Shell", content)
            self.assertIn("CVE-2021-44228", content)
            # Проверяем наличие основных функций
            self.assertIn("setup_ldap_server", content)
    
    def test_generate_specific_exploits(self):
        """Тест генерации конкретных типов эксплойтов"""
        # Тестируем генерацию RCE эксплойта
        rce_info = {
            "name": "Test RCE",
            "type": "rce",
            "severity": "high",
            "affected_platforms": ["linux"],
            "description": "Test RCE vulnerability"
        }
        rce_path = self.generator.generate_rce_exploit(
            "CVE-TEST-RCE", rce_info, "linux", 
            os.path.join(self.output_dir, "test_rce.py")
        )
        self.assertTrue(os.path.exists(rce_path))
        
        # Тестируем генерацию Privilege Escalation эксплойта
        privesc_info = {
            "name": "Test PrivEsc",
            "type": "privilege_escalation",
            "severity": "high",
            "affected_platforms": ["windows"],
            "description": "Test Privilege Escalation vulnerability"
        }
        privesc_path = self.generator.generate_privesc_exploit(
            "CVE-TEST-PRIVESC", privesc_info, "windows",
            os.path.join(self.output_dir, "test_privesc.py")
        )
        self.assertTrue(os.path.exists(privesc_path))

if __name__ == "__main__":
    unittest.main() 