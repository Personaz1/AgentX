#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
NeuroRAT Agent Thinker Module

–ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è –∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π –∞–≥–µ–Ω—Ç–∞.
–†–µ–∞–ª–∏–∑—É–µ—Ç —Ü–∏–∫–ª Think-Act —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Å LLM.
"""

import os
import sys
import json
import time
import logging
import threading
import random
import socket
import requests
import base64
import datetime
from typing import Dict, List, Any, Optional, Union, Tuple, Callable

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –∞–≥–µ–Ω—Ç–∞
try:
    from agent_memory import AgentMemory
    from agent_state import AgentState, OPERATIONAL_MODE_AUTO, OPERATIONAL_MODE_MANUAL, OPERATIONAL_MODE_HYBRID
except ImportError:
    sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
    from agent_memory import AgentMemory
    from agent_state import AgentState, OPERATIONAL_MODE_AUTO, OPERATIONAL_MODE_MANUAL, OPERATIONAL_MODE_HYBRID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger("AgentThinker")
if not logger.handlers:
    handler = logging.StreamHandler()
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    handler.setFormatter(formatter)
    logger.addHandler(handler)
    logger.setLevel(logging.INFO)

# –°–∏–º–≤–æ–ª—ã –¥–ª—è –¥—É–º–∞—é—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞
THINKING_SYMBOLS = ["üí≠", "üß†", "ü§î", "üîÑ", "‚öôÔ∏è"]

class AgentThinker:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–º –º—ã—à–ª–µ–Ω–∏–µ–º –∞–≥–µ–Ω—Ç–∞.
    –†–µ–∞–ª–∏–∑—É–µ—Ç —Ü–∏–∫–ª Think-Act —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Å LLM.
    """
    
    def __init__(self, state: AgentState, memory: AgentMemory,
                 thinking_interval: int = 60, 
                 command_callback: Optional[Callable] = None,
                 llm_provider: str = "local", 
                 llm_config: Dict = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º—ã—Å–ª–∏—Ç–µ–ª—è –∞–≥–µ–Ω—Ç–∞.
        
        Args:
            state: –û–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≥–µ–Ω—Ç–∞
            memory: –û–±—ä–µ–∫—Ç –ø–∞–º—è—Ç–∏ –∞–≥–µ–Ω—Ç–∞
            thinking_interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ –º—ã—à–ª–µ–Ω–∏—è (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
            command_callback: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
            llm_provider: –ü—Ä–æ–≤–∞–π–¥–µ—Ä LLM ("local", "openai", "anthropic", "api")
            llm_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è LLM
        """
        self.state = state
        self.memory = memory
        self.thinking_interval = max(10, thinking_interval)  # –ú–∏–Ω–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥
        self.command_callback = command_callback
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è LLM
        self.llm_provider = llm_provider
        self.llm_config = llm_config or {}
        
        # –ó–∞–ø—É—â–µ–Ω –ª–∏ –º—ã—Å–ª–∏—Ç–µ–ª—å
        self.running = False
        self.thinking_thread = None
        self.thinking_lock = threading.RLock()
        
        # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è
        self.last_thinking_time = 0
        
        # –°—á–µ—Ç—á–∏–∫ —Ü–∏–∫–ª–æ–≤ –º—ã—à–ª–µ–Ω–∏—è
        self.thinking_count = 0
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        self.system_prompt = self._load_system_prompt()
        
        logger.info("AgentThinker –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _load_system_prompt(self) -> str:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è LLM.
        
        Returns:
            –¢–µ–∫—Å—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
        """
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞
        prompt_file = os.path.join(os.path.dirname(os.path.abspath(__file__)), "system_prompt.txt")
        
        if os.path.exists(prompt_file):
            try:
                with open(prompt_file, 'r', encoding='utf-8') as f:
                    prompt = f.read()
                logger.debug(f"–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ {prompt_file}")
                return prompt
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞: {str(e)}")
        
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        default_prompt = """–¢—ã –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∞–≥–µ–Ω—Ç –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, —Ä–∞–±–æ—Ç–∞—é—â–∏–π –≤–Ω—É—Ç—Ä–∏ —É–¥–∞–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã. 
–¢–≤–æ—è —Ü–µ–ª—å - —Å–æ–±–∏—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ, –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –µ–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π 
–∏ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ —Ü–µ–ª—è–º–∏.

–¢—ã –º–æ–∂–µ—à—å:
1. –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—Ä–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
2. –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
3. –ü—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥
4. –û–±–Ω–æ–≤–ª—è—Ç—å —Å–≤–æ–∏ —Ü–µ–ª–∏ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã

–¢–≤–æ–∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
1. –ù–ê–ë–õ–Æ–î–ï–ù–ò–ï: —á—Ç–æ —Ç—ã –∑–Ω–∞–µ—à—å –æ —Å–∏—Å—Ç–µ–º–µ –∏ —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏
2. –û–¶–ï–ù–ö–ê: –∞–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ä–∏—Å–∫–æ–≤/–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
3. –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï: —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
4. –î–ï–ô–°–¢–í–ò–ï: –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å

–í—Å–µ —Ç–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–º–∏, —á—Ç–æ–±—ã –Ω–µ –Ω–∞—Ä—É—à–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã.
–û—Ç–≤–µ—á–∞–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."""
        
        logger.debug("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç")
        return default_prompt
    
    def start(self) -> bool:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Ç–æ–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è.
        
        Returns:
            True, –µ—Å–ª–∏ –∑–∞–ø—É—Å–∫ —É—Å–ø–µ—à–µ–Ω
        """
        with self.thinking_lock:
            if self.running:
                logger.warning("–ú—ã—Å–ª–∏—Ç–µ–ª—å —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã—Å–ª–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω
            if self.state.get_mode() == OPERATIONAL_MODE_MANUAL:
                logger.warning("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ –≤ —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ")
                return False
            
            self.running = True
            self.thinking_thread = threading.Thread(target=self._thinking_loop, daemon=True)
            self.thinking_thread.start()
            
            logger.info("–ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
            return True
    
    def stop(self) -> bool:
        """
        –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ—Ç–æ–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è.
        
        Returns:
            True, –µ—Å–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞
        """
        with self.thinking_lock:
            if not self.running:
                logger.warning("–ú—ã—Å–ª–∏—Ç–µ–ª—å –Ω–µ –∑–∞–ø—É—â–µ–Ω")
                return False
            
            self.running = False
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ (—Å —Ç–∞–π–º–∞—É—Ç–æ–º)
            if self.thinking_thread and self.thinking_thread.is_alive():
                logger.debug("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –º—ã—à–ª–µ–Ω–∏—è...")
                # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º join –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            
            logger.info("–ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
    
    def think_once(self) -> Dict[str, Any]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω —Ü–∏–∫–ª –º—ã—à–ª–µ–Ω–∏—è –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é.
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è
        """
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è
        context = self._gather_thinking_context()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ LLM
        prompt = self._create_thinking_prompt(context)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç LLM
        thinking_result = self._query_llm(prompt)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        processed_result = self._process_thinking_result(thinking_result)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏
        self._save_thinking_to_memory(processed_result)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è
        self.last_thinking_time = time.time()
        self.thinking_count += 1
        
        return processed_result
    
    def _thinking_loop(self):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è.
        """
        logger.info("–ó–∞–ø—É—â–µ–Ω —Ü–∏–∫–ª –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è")
        
        while self.running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ
                current_time = time.time()
                time_since_last = current_time - self.last_thinking_time
                
                if time_since_last >= self.thinking_interval:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
                    current_mode = self.state.get_mode()
                    if current_mode != OPERATIONAL_MODE_MANUAL:
                        logger.info(f"{random.choice(THINKING_SYMBOLS)} –ù–∞—á–∏–Ω–∞—é —Ü–∏–∫–ª —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è...")
                        
                        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–¥–∏–Ω —Ü–∏–∫–ª –º—ã—à–ª–µ–Ω–∏—è
                        result = self.think_once()
                        
                        # –ï—Å–ª–∏ –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ –∏ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –≤—ã–ø–æ–ª–Ω—è–µ–º –∏—Ö
                        if current_mode == OPERATIONAL_MODE_AUTO and result.get('actions'):
                            self._execute_planned_actions(result['actions'])
                
                # –°–ø–∏–º –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –Ω–µ –Ω–∞–≥—Ä—É–∂–∞—Ç—å CPU
                time.sleep(1)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º—ã—à–ª–µ–Ω–∏—è: {str(e)}")
                time.sleep(5)  # –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –æ—à–∏–±–∫–∏
        
        logger.info("–¶–∏–∫–ª –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    def _gather_thinking_context(self) -> Dict[str, Any]:
        """
        –°–æ–±–∏—Ä–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è
        """
        context = {
            "timestamp": datetime.datetime.now().isoformat(),
            "agent_id": self.state.agent_id,
            "operational_mode": self.state.get_mode(),
            "goals": self.state.get_goals(),
            "recent_commands": self.state.get_commands(10),
            "recent_errors": self.state.get_errors(5),
            "system_info": {}
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        try:
            context["system_info"] = {
                "hostname": socket.gethostname(),
                "current_dir": os.getcwd(),
                "platform": sys.platform,
                "python_version": sys.version.split()[0]
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∏–∑ –ø–∞–º—è—Ç–∏
        try:
            observations = self.memory.search_long_term(
                category="observation", 
                limit=10
            )
            context["recent_observations"] = observations
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π –∏–∑ –ø–∞–º—è—Ç–∏: {str(e)}")
            context["recent_observations"] = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è
        try:
            thoughts = self.memory.search_long_term(
                category="thought",
                limit=3
            )
            context["recent_thoughts"] = thoughts
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π –∏–∑ –ø–∞–º—è—Ç–∏: {str(e)}")
            context["recent_thoughts"] = []
        
        return context
    
    def _create_thinking_prompt(self, context: Dict[str, Any]) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM.
        
        Args:
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è
            
        Returns:
            –¢–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞
        """
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context_text = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        context_text.append("# –¢–ï–ö–£–©–ò–ô –ö–û–ù–¢–ï–ö–°–¢")
        context_text.append(f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {context['timestamp']}")
        context_text.append(f"ID –∞–≥–µ–Ω—Ç–∞: {context['agent_id']}")
        context_text.append(f"–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: {context['operational_mode']}")
        context_text.append("")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        context_text.append("## –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ")
        sys_info = context.get('system_info', {})
        for key, value in sys_info.items():
            context_text.append(f"- {key}: {value}")
        context_text.append("")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–ª–∏
        context_text.append("## –¢–µ–∫—É—â–∏–µ —Ü–µ–ª–∏")
        goals = context.get('goals', [])
        if goals:
            for goal in goals:
                status = goal.get('status', 'active')
                progress = goal.get('progress', 0)
                context_text.append(f"- [{status.upper()} {progress}%] {goal.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ü–µ–ª—å')}")
        else:
            context_text.append("- –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π")
        context_text.append("")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        context_text.append("## –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã")
        commands = context.get('recent_commands', [])
        if commands:
            for cmd in commands:
                timestamp = cmd.get('timestamp', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                command = cmd.get('command', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                status = cmd.get('status', 'unknown')
                context_text.append(f"- [{timestamp}] `{command}` - {status}")
        else:
            context_text.append("- –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö")
        context_text.append("")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏
        context_text.append("## –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏")
        errors = context.get('recent_errors', [])
        if errors:
            for error in errors:
                timestamp = error.get('timestamp', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                message = error.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                context_text.append(f"- [{timestamp}] {message}")
        else:
            context_text.append("- –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ–± –æ—à–∏–±–∫–∞—Ö")
        context_text.append("")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
        context_text.append("## –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è")
        observations = context.get('recent_observations', [])
        if observations:
            for obs in observations:
                timestamp = obs.get('timestamp', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                content = obs.get('content', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ')
                importance = obs.get('importance', 0)
                context_text.append(f"- [{timestamp}] [–≤–∞–∂–Ω–æ—Å—Ç—å: {importance}] {content}")
        else:
            context_text.append("- –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è—Ö")
        context_text.append("")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è
        context_text.append("## –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è")
        thoughts = context.get('recent_thoughts', [])
        if thoughts:
            for thought in thoughts:
                timestamp = thought.get('timestamp', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                conclusion = thought.get('metadata', {}).get('conclusion', '–ù–µ—Ç –≤—ã–≤–æ–¥–∞')
                context_text.append(f"- [{timestamp}] –í—ã–≤–æ–¥: {conclusion}")
        else:
            context_text.append("- –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è—Ö")
        context_text.append("")
        
        # –ó–∞–¥–∞–Ω–∏–µ –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è
        task_text = """
# –ó–ê–î–ê–ß–ê
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –≤—ã–ø–æ–ª–Ω–∏ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–∞—Ö.

–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π —Å–≤–æ–π –æ—Ç–≤–µ—Ç –ø–æ —Å–ª–µ–¥—É—é—â–∏–º —Ä–∞–∑–¥–µ–ª–∞–º:

1. –ù–ê–ë–õ–Æ–î–ï–ù–ò–ï: –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
2. –û–¶–ï–ù–ö–ê: –∞–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏, –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ä–∏—Å–∫–æ–≤ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
3. –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
4. –î–ï–ô–°–¢–í–ò–ï: –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å (–≤ —Ñ–æ—Ä–º–µ –∫–æ–º–∞–Ω–¥)

–ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π, –ø—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
"""
        
        # –°–æ–±–∏—Ä–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
        final_prompt = self.system_prompt + "\n\n" + "\n".join(context_text) + "\n" + task_text
        
        return final_prompt
    
    def _query_llm(self, prompt: str) -> str:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ LLM –∏ –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç.
        
        Args:
            prompt: –¢–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞
            
        Returns:
            –û—Ç–≤–µ—Ç –æ—Ç LLM
        """
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ LLM –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏
        logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM (–ø—Ä–æ–≤–∞–π–¥–µ—Ä: {self.llm_provider})")
        
        try:
            # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –≤—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥
            if self.llm_provider == "local":
                return self._query_local_llm(prompt)
            elif self.llm_provider == "openai":
                return self._query_openai_llm(prompt)
            elif self.llm_provider == "anthropic":
                return self._query_anthropic_llm(prompt)
            elif self.llm_provider == "api":
                return self._query_api_llm(prompt)
            else:
                # –ï—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
                logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä LLM: {self.llm_provider}")
                return self._generate_fallback_response(prompt)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ LLM: {str(e)}")
            return self._generate_fallback_response(prompt)
    
    def _query_local_llm(self, prompt: str) -> str:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ LLM.
        
        Args:
            prompt: –¢–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞
            
        Returns:
            –û—Ç–≤–µ—Ç –æ—Ç LLM
        """
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ LLM
        model_path = self.llm_config.get('model_path', '/models/default')
        host = self.llm_config.get('host', 'localhost')
        port = self.llm_config.get('port', 8000)
        temperature = self.llm_config.get('temperature', 0.7)
        max_tokens = self.llm_config.get('max_tokens', 1000)
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            url = f"http://{host}:{port}/v1/completions"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
            data = {
                "prompt": prompt,
                "model": model_path,
                "temperature": temperature,
                "max_tokens": max_tokens,
                "stream": False
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            response = requests.post(url, json=data, timeout=30)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
            if response.status_code == 200:
                result = response.json()
                
                if "choices" in result and len(result["choices"]) > 0:
                    completion_text = result["choices"][0].get("text", "")
                    return completion_text
                else:
                    logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç LLM: {result}")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM: {response.status_code} - {response.text}")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É LLM: {str(e)}")
        
        return self._generate_fallback_response(prompt)
    
    def _query_openai_llm(self, prompt: str) -> str:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ OpenAI LLM.
        
        Args:
            prompt: –¢–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞
            
        Returns:
            –û—Ç–≤–µ—Ç –æ—Ç LLM
        """
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é OpenAI
        api_key = self.llm_config.get('api_key')
        model = self.llm_config.get('model', 'gpt-3.5-turbo')
        temperature = self.llm_config.get('temperature', 0.7)
        max_tokens = self.llm_config.get('max_tokens', 1000)
        
        if not api_key:
            logger.error("API –∫–ª—é—á OpenAI –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return self._generate_fallback_response(prompt)
        
        try:
            import openai
            openai.api_key = api_key
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            messages = [
                {"role": "system", "content": self.system_prompt},
                {"role": "user", "content": prompt}
            ]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            response = openai.ChatCompletion.create(
                model=model,
                messages=messages,
                temperature=temperature,
                max_tokens=max_tokens
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
            if response and "choices" in response and len(response["choices"]) > 0:
                message = response["choices"][0].get("message", {})
                return message.get("content", "")
            else:
                logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI: {response}")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI: {str(e)}")
        
        return self._generate_fallback_response(prompt)
    
    def _query_anthropic_llm(self, prompt: str) -> str:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Anthropic LLM.
        
        Args:
            prompt: –¢–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞
            
        Returns:
            –û—Ç–≤–µ—Ç –æ—Ç LLM
        """
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Anthropic
        api_key = self.llm_config.get('api_key')
        model = self.llm_config.get('model', 'claude-v1')
        temperature = self.llm_config.get('temperature', 0.7)
        max_tokens = self.llm_config.get('max_tokens', 1000)
        
        if not api_key:
            logger.error("API –∫–ª—é—á Anthropic –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return self._generate_fallback_response(prompt)
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            url = "https://api.anthropic.com/v1/complete"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ Anthropic
            data = {
                "prompt": f"\n\nHuman: {prompt}\n\nAssistant:",
                "model": model,
                "temperature": temperature,
                "max_tokens_to_sample": max_tokens,
                "stop_sequences": ["\n\nHuman:"]
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            headers = {
                "x-api-key": api_key,
                "content-type": "application/json"
            }
            
            response = requests.post(url, json=data, headers=headers, timeout=30)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
            if response.status_code == 200:
                result = response.json()
                return result.get("completion", "")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Anthropic: {response.status_code} - {response.text}")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Anthropic: {str(e)}")
        
        return self._generate_fallback_response(prompt)
    
    def _query_api_llm(self, prompt: str) -> str:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–º—É API LLM.
        
        Args:
            prompt: –¢–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞
            
        Returns:
            –û—Ç–≤–µ—Ç –æ—Ç LLM
        """
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é API
        api_url = self.llm_config.get('api_url')
        api_key = self.llm_config.get('api_key')
        headers = self.llm_config.get('headers', {})
        method = self.llm_config.get('method', 'POST')
        
        if not api_url:
            logger.error("URL API –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return self._generate_fallback_response(prompt)
        
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º API –∫–ª—é—á –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
            if api_key:
                headers['Authorization'] = f"Bearer {api_key}"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            data_template = self.llm_config.get('data_template', {"prompt": ""})
            data = data_template.copy()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç –≤ –¥–∞–Ω–Ω—ã–µ
            if 'prompt_field' in self.llm_config:
                prompt_field = self.llm_config['prompt_field']
                # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–æ–ª—è —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É
                if '.' in prompt_field:
                    parts = prompt_field.split('.')
                    current = data
                    for part in parts[:-1]:
                        if part not in current:
                            current[part] = {}
                        current = current[part]
                    current[parts[-1]] = prompt
                else:
                    data[prompt_field] = prompt
            else:
                data['prompt'] = prompt
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            response = requests.request(
                method=method,
                url=api_url,
                json=data,
                headers=headers,
                timeout=30
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
            if response.status_code == 200:
                result = response.json()
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                if 'response_field' in self.llm_config:
                    response_field = self.llm_config['response_field']
                    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–æ–ª—è —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É
                    if '.' in response_field:
                        parts = response_field.split('.')
                        current = result
                        for part in parts:
                            if part.isdigit() and isinstance(current, list):
                                current = current[int(part)]
                            elif isinstance(current, dict) and part in current:
                                current = current[part]
                            else:
                                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª–µ {part} –≤ –æ—Ç–≤–µ—Ç–µ")
                                return self._generate_fallback_response(prompt)
                        return str(current)
                    else:
                        return str(result.get(response_field, ""))
                else:
                    # –ï—Å–ª–∏ –ø–æ–ª–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    return str(result)
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API: {response.status_code} - {response.text}")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {str(e)}")
        
        return self._generate_fallback_response(prompt)
    
    def _generate_fallback_response(self, prompt: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM.
        
        Args:
            prompt: –ò—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            
        Returns:
            –†–µ–∑–µ—Ä–≤–Ω—ã–π –æ—Ç–≤–µ—Ç
        """
        # –ü—Ä–æ—Å—Ç–æ–π fallback-–æ—Ç–≤–µ—Ç —Å –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        fallback = """
–ù–ê–ë–õ–Æ–î–ï–ù–ò–ï:
–ù–∞–±–ª—é–¥–∞–µ—Ç—Å—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ LLM –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞. –í–æ–∑–º–æ–∂–Ω—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π.

–û–¶–ï–ù–ö–ê:
–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ LLM. –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ LLM.

–ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï:
1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å LLM —Å–µ—Ä–≤–∏—Å–∞
2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
3. –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π LLM —Å–µ—Ä–≤–∏—Å

–î–ï–ô–°–¢–í–ò–ï:
- ping google.com (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è)
- netstat -tulpn | grep <–ø–æ—Ä—Ç LLM> (–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ LLM)
- ls -la /–ø—É—Ç—å/–∫/–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
"""
        return fallback
    
    def _process_thinking_result(self, result: str) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è.
        
        Args:
            result: –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç LLM
            
        Returns:
            –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è
        """
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        processed = {
            "raw_response": result,
            "sections": {},
            "actions": [],
            "conclusion": "",
            "success": False
        }
        
        try:
            # –†–∞–∑–±–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ —Å–µ–∫—Ü–∏–∏
            sections = {
                "–ù–ê–ë–õ–Æ–î–ï–ù–ò–ï": "",
                "–û–¶–ï–ù–ö–ê": "",
                "–ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï": "",
                "–î–ï–ô–°–¢–í–ò–ï": ""
            }
            
            current_section = None
            lines = []
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
            for line in result.split('\n'):
                line = line.strip()
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                if not line:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º —Å–µ–∫—Ü–∏–∏
                upper_line = line.upper()
                is_section = False
                
                for section_name in sections.keys():
                    if section_name in upper_line:
                        current_section = section_name
                        is_section = True
                        break
                
                # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ –∏ –µ—Å—Ç—å —Ç–µ–∫—É—â–∞—è —Å–µ–∫—Ü–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∫ —Å–µ–∫—Ü–∏–∏
                if not is_section and current_section:
                    lines.append(line)
                elif current_section and is_section and lines:
                    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –Ω–æ–≤—É—é —Å–µ–∫—Ü–∏—é, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é
                    sections[current_section] = '\n'.join(lines)
                    lines = []
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ–∫—Ü–∏—é
            if current_section and lines:
                sections[current_section] = '\n'.join(lines)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ–∫—Ü–∏–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            processed["sections"] = sections
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ —Å–µ–∫—Ü–∏–∏ "–î–ï–ô–°–¢–í–ò–ï"
            actions_text = sections.get("–î–ï–ô–°–¢–í–ò–ï", "")
            actions = []
            
            # –ò—â–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ —Ç–µ–∫—Å—Ç–µ –¥–µ–π—Å—Ç–≤–∏–π
            for line in actions_text.split('\n'):
                line = line.strip()
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                if not line:
                    continue
                
                # –ò—â–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ "- cmd" –∏–ª–∏ "* cmd" –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ "cmd"
                if line.startswith('-') or line.startswith('*'):
                    cmd = line[1:].strip()
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ –æ–±—Ä–∞—Ç–Ω—ã—Ö –∫–∞–≤—ã—á–µ–∫, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                    if '`' in cmd:
                        cmd_parts = cmd.split('`')
                        if len(cmd_parts) >= 3:  # –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –¥–æ –∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
                            cmd = cmd_parts[1].strip()
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞—è
                    if cmd:
                        actions.append(cmd)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—ã –≤ –æ–±—Ä–∞—Ç–Ω—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö –±–µ–∑ –º–∞—Ä–∫–µ—Ä–æ–≤ —Å–ø–∏—Å–∫–∞
                elif '`' in line:
                    cmd_parts = line.split('`')
                    if len(cmd_parts) >= 3:  # –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –¥–æ –∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
                        cmd = cmd_parts[1].strip()
                        if cmd:
                            actions.append(cmd)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            processed["actions"] = actions
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ (–∑–∞–∫–ª—é—á–µ–Ω–∏–µ)
            conclusion_parts = []
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –Ω–∞—á–∞–ª–æ
            if sections.get("–ù–ê–ë–õ–Æ–î–ï–ù–ò–ï"):
                observation_lines = sections["–ù–ê–ë–õ–Æ–î–ï–ù–ò–ï"].split('\n')
                if observation_lines:
                    conclusion_parts.append(observation_lines[0])
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ü–µ–Ω–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ –Ω–∞—á–∞–ª–æ
            if sections.get("–û–¶–ï–ù–ö–ê"):
                assessment_lines = sections["–û–¶–ï–ù–ö–ê"].split('\n')
                if assessment_lines:
                    conclusion_parts.append(assessment_lines[0])
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–µ–∫—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç
            if sections.get("–ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï"):
                planning_text = sections["–ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï"]
                if "1." in planning_text:
                    first_point = planning_text.split("1.")[1].split("\n")[0].strip()
                    conclusion_parts.append(f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {first_point}")
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è, —É–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            if actions:
                conclusion_parts.append(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –¥–µ–π—Å—Ç–≤–∏–π: {len(actions)}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ
            processed["conclusion"] = ". ".join(conclusion_parts)
            
            # –ï—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ –∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Å–µ–∫—Ü–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º
            if any(text for text in sections.values()):
                processed["success"] = True
            
            return processed
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è: {str(e)}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            processed["conclusion"] = "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è"
            return processed
    
    def _save_thinking_to_memory(self, thinking_result: Dict[str, Any]) -> str:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç–∏.
        
        Args:
            thinking_result: –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è
            
        Returns:
            ID –∑–∞–ø–∏—Å–∏ –≤ –ø–∞–º—è—Ç–∏
        """
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–ø–∏—Å–∏
            content = f"–†–∞–∑–º—ã—à–ª–µ–Ω–∏–µ #{self.thinking_count + 1}: {thinking_result.get('conclusion', '–ë–µ–∑ –∑–∞–∫–ª—é—á–µ–Ω–∏—è')}"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            metadata = {
                "success": thinking_result.get("success", False),
                "conclusion": thinking_result.get("conclusion", ""),
                "sections": thinking_result.get("sections", {}),
                "actions": thinking_result.get("actions", []),
                "thinking_count": self.thinking_count + 1
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–º—è—Ç—å
            memory_id = self.memory.add_to_long_term(
                content=content,
                importance=6,  # –°—Ä–µ–¥–Ω–µ-–≤—ã—Å–æ–∫–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å
                category="thought",
                tags=["thinking", "autonomy"],
                metadata=metadata
            )
            
            logger.debug(f"–†–∞–∑–º—ã—à–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ø–∞–º—è—Ç–∏ (ID: {memory_id})")
            return memory_id
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç–∏: {str(e)}")
            return ""
    
    def _execute_planned_actions(self, actions: List[str]) -> None:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è.
        
        Args:
            actions: –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
        if not self.command_callback or not callable(self.command_callback):
            logger.warning("–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –Ω–µ –∑–∞–¥–∞–Ω–∞")
            return
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
        for cmd in actions:
            try:
                logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã: {cmd}")
                
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                cmd_id = self.state.log_command(cmd, "autonomous")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ callback
                result = self.command_callback(cmd)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–º–∞–Ω–¥—ã
                self.state.update_command(cmd_id, "completed", result)
                
                # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                if result.get('error'):
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {result.get('error')}")
                    self.state.log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã: {cmd}")
                    break
                
                # –î–µ–ª–∞–µ–º –ø–∞—É–∑—É –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏
                time.sleep(1)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã {cmd}: {str(e)}")
                self.state.log_error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã: {str(e)}")
                break


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    state = AgentState(agent_id="test-agent", state_file="agent_state.json")
    memory = AgentMemory(memory_file="agent_memory.json")
    
    # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
    def execute_command(cmd):
        print(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {cmd}")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
        return {"output": f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥—ã {cmd}", "error": None}
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º—ã—Å–ª–∏—Ç–µ–ª—è
    thinker = AgentThinker(
        state=state,
        memory=memory,
        thinking_interval=30,  # –î—É–º–∞—Ç—å –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        command_callback=execute_command,
        llm_provider="local",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
        llm_config={
            "host": "localhost",
            "port": 8000
        }
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ü–µ–ª—å
    state.add_goal("–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –∏ –Ω–∞–π—Ç–∏ —É—è–∑–≤–∏–º–æ—Å—Ç–∏", priority=8)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç—å
    memory.add_to_long_term(
        content="–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è /var/www/html —Å –¥–æ—Å—Ç—É–ø–æ–º –Ω–∞ –∑–∞–ø–∏—Å—å",
        importance=7,
        category="observation",
        tags=["security", "filesystem"]
    )
    
    memory.add_to_long_term(
        content="–ù–∞–π–¥–µ–Ω nginx —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä—Å–∏–∏ 1.14.2 —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ —É—è–∑–≤–∏–º–æ—Å—Ç—è–º–∏",
        importance=8,
        category="observation",
        tags=["security", "service", "nginx"]
    )
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–¥–∏–Ω —Ü–∏–∫–ª –º—ã—à–ª–µ–Ω–∏—è
    print("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è...")
    result = thinker.think_once()
    
    print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è:")
    print(f"–ó–∞–∫–ª—é—á–µ–Ω–∏–µ: {result['conclusion']}")
    print(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è ({len(result['actions'])}):")
    for action in result['actions']:
        print(f"- {action}")
    
    # –í —Ä–µ–∞–ª—å–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è
    # thinker.start()
    # time.sleep(300)  # –†–∞–±–æ—Ç–∞–µ–º 5 –º–∏–Ω—É—Ç
    # thinker.stop() 