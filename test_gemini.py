#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Gemini API
"""

import os
import sys
import json
import argparse
from api_integration import APIFactory

def test_text_generation(prompt, system_prompt=None, stream=False):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é Gemini API
    
    Args:
        prompt: –ó–∞–ø—Ä–æ—Å –¥–ª—è –º–æ–¥–µ–ª–∏
        system_prompt: –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
        stream: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Ç–æ–∫–æ–≤—É—é –ø–µ—Ä–µ–¥–∞—á—É –æ—Ç–≤–µ—Ç–∞
    """
    gemini = APIFactory.get_gemini_integration()
    
    if not gemini.is_available():
        print("‚ùå Google Gemini API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return
    
    print(f"\nü§ñ –ó–∞–ø—Ä–æ—Å: {prompt}")
    if system_prompt:
        print(f"üìù –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç: {system_prompt}")
    
    print("\nüîç –û—Ç–≤–µ—Ç:")
    response = gemini.generate_response(prompt, system_prompt, stream)
    
    if not stream:  # –ï—Å–ª–∏ –Ω–µ —Å—Ç—Ä–∏–º–∏–Ω–≥, –≤—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç
        print(response)

def test_image_generation(prompt):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é Gemini API
    
    Args:
        prompt: –û–ø–∏—Å–∞–Ω–∏–µ –∂–µ–ª–∞–µ–º–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    gemini = APIFactory.get_gemini_integration()
    
    if not gemini.is_available():
        print("‚ùå Google Gemini API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return
    
    print(f"\nüñºÔ∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {prompt}")
    print("\n‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
    
    result = gemini.generate_image(prompt)
    
    if "error" in result:
        print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
    else:
        print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: {result['image_path']}")
        print(f"üìä –¢–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {result['mime_type']}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞"""
    parser = argparse.ArgumentParser(description="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Gemini API")
    parser.add_argument("--prompt", type=str, help="–ó–∞–ø—Ä–æ—Å –¥–ª—è –º–æ–¥–µ–ª–∏", 
                        default="–û–ø–∏—à–∏ —Å–µ–±—è –∏ —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.")
    parser.add_argument("--system", type=str, help="–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç", 
                        default="–¢—ã - –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –≤–Ω—É—Ç—Ä–∏ —Å–∏—Å—Ç–µ–º—ã NeuroRAT. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É.")
    parser.add_argument("--stream", action="store_true", help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Ç–æ–∫–æ–≤—É—é –ø–µ—Ä–µ–¥–∞—á—É –æ—Ç–≤–µ—Ç–∞")
    parser.add_argument("--image", type=str, help="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É")
    
    args = parser.parse_args()
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Gemini API")
    
    if args.image:
        test_image_generation(args.image)
    else:
        test_text_generation(args.prompt, args.system, args.stream)

if __name__ == "__main__":
    main() 